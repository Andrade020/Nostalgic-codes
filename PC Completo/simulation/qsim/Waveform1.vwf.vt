// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/07/2017 16:05:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Proc_Simples
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Proc_Simples_vlg_sample_tst(
	clk,
	rst,
	sampler_tx
);
input  clk;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Proc_Simples_vlg_check_tst (
	R_ui,
	S_ula,
	sais,
	sampler_rx
);
input [7:0] R_ui;
input [7:0] S_ula;
input [7:0] sais;
input sampler_rx;

reg [7:0] R_ui_expected;
reg [7:0] S_ula_expected;
reg [7:0] sais_expected;

reg [7:0] R_ui_prev;
reg [7:0] S_ula_prev;
reg [7:0] sais_prev;

reg [7:0] R_ui_expected_prev;
reg [7:0] S_ula_expected_prev;
reg [7:0] sais_expected_prev;

reg [7:0] last_R_ui_exp;
reg [7:0] last_S_ula_exp;
reg [7:0] last_sais_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	R_ui_prev = R_ui;
	S_ula_prev = S_ula;
	sais_prev = sais;
end

// update expected /o prevs

always @(trigger)
begin
	R_ui_expected_prev = R_ui_expected;
	S_ula_expected_prev = S_ula_expected;
	sais_expected_prev = sais_expected;
end


// expected R_ui[ 7 ]
initial
begin
	R_ui_expected[7] = 1'bX;
end 
// expected R_ui[ 6 ]
initial
begin
	R_ui_expected[6] = 1'bX;
end 
// expected R_ui[ 5 ]
initial
begin
	R_ui_expected[5] = 1'bX;
end 
// expected R_ui[ 4 ]
initial
begin
	R_ui_expected[4] = 1'bX;
end 
// expected R_ui[ 3 ]
initial
begin
	R_ui_expected[3] = 1'bX;
end 
// expected R_ui[ 2 ]
initial
begin
	R_ui_expected[2] = 1'bX;
end 
// expected R_ui[ 1 ]
initial
begin
	R_ui_expected[1] = 1'bX;
end 
// expected R_ui[ 0 ]
initial
begin
	R_ui_expected[0] = 1'bX;
end 
// expected S_ula[ 7 ]
initial
begin
	S_ula_expected[7] = 1'bX;
end 
// expected S_ula[ 6 ]
initial
begin
	S_ula_expected[6] = 1'bX;
end 
// expected S_ula[ 5 ]
initial
begin
	S_ula_expected[5] = 1'bX;
end 
// expected S_ula[ 4 ]
initial
begin
	S_ula_expected[4] = 1'bX;
end 
// expected S_ula[ 3 ]
initial
begin
	S_ula_expected[3] = 1'bX;
end 
// expected S_ula[ 2 ]
initial
begin
	S_ula_expected[2] = 1'bX;
end 
// expected S_ula[ 1 ]
initial
begin
	S_ula_expected[1] = 1'bX;
end 
// expected S_ula[ 0 ]
initial
begin
	S_ula_expected[0] = 1'bX;
end 
// expected sais[ 7 ]
initial
begin
	sais_expected[7] = 1'bX;
end 
// expected sais[ 6 ]
initial
begin
	sais_expected[6] = 1'bX;
end 
// expected sais[ 5 ]
initial
begin
	sais_expected[5] = 1'bX;
end 
// expected sais[ 4 ]
initial
begin
	sais_expected[4] = 1'bX;
end 
// expected sais[ 3 ]
initial
begin
	sais_expected[3] = 1'bX;
end 
// expected sais[ 2 ]
initial
begin
	sais_expected[2] = 1'bX;
end 
// expected sais[ 1 ]
initial
begin
	sais_expected[1] = 1'bX;
end 
// expected sais[ 0 ]
initial
begin
	sais_expected[0] = 1'bX;
end 
// generate trigger
always @(R_ui_expected or R_ui or S_ula_expected or S_ula or sais_expected or sais)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected R_ui = %b | expected S_ula = %b | expected sais = %b | ",R_ui_expected_prev,S_ula_expected_prev,sais_expected_prev);
	$display("| real R_ui = %b | real S_ula = %b | real sais = %b | ",R_ui_prev,S_ula_prev,sais_prev);
`endif
	if (
		( R_ui_expected_prev[0] !== 1'bx ) && ( R_ui_prev[0] !== R_ui_expected_prev[0] )
		&& ((R_ui_expected_prev[0] !== last_R_ui_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[0] = R_ui_expected_prev[0];
	end
	if (
		( R_ui_expected_prev[1] !== 1'bx ) && ( R_ui_prev[1] !== R_ui_expected_prev[1] )
		&& ((R_ui_expected_prev[1] !== last_R_ui_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[1] = R_ui_expected_prev[1];
	end
	if (
		( R_ui_expected_prev[2] !== 1'bx ) && ( R_ui_prev[2] !== R_ui_expected_prev[2] )
		&& ((R_ui_expected_prev[2] !== last_R_ui_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[2] = R_ui_expected_prev[2];
	end
	if (
		( R_ui_expected_prev[3] !== 1'bx ) && ( R_ui_prev[3] !== R_ui_expected_prev[3] )
		&& ((R_ui_expected_prev[3] !== last_R_ui_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[3] = R_ui_expected_prev[3];
	end
	if (
		( R_ui_expected_prev[4] !== 1'bx ) && ( R_ui_prev[4] !== R_ui_expected_prev[4] )
		&& ((R_ui_expected_prev[4] !== last_R_ui_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[4] = R_ui_expected_prev[4];
	end
	if (
		( R_ui_expected_prev[5] !== 1'bx ) && ( R_ui_prev[5] !== R_ui_expected_prev[5] )
		&& ((R_ui_expected_prev[5] !== last_R_ui_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[5] = R_ui_expected_prev[5];
	end
	if (
		( R_ui_expected_prev[6] !== 1'bx ) && ( R_ui_prev[6] !== R_ui_expected_prev[6] )
		&& ((R_ui_expected_prev[6] !== last_R_ui_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[6] = R_ui_expected_prev[6];
	end
	if (
		( R_ui_expected_prev[7] !== 1'bx ) && ( R_ui_prev[7] !== R_ui_expected_prev[7] )
		&& ((R_ui_expected_prev[7] !== last_R_ui_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_ui[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_ui_expected_prev);
		$display ("     Real value = %b", R_ui_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_R_ui_exp[7] = R_ui_expected_prev[7];
	end
	if (
		( S_ula_expected_prev[0] !== 1'bx ) && ( S_ula_prev[0] !== S_ula_expected_prev[0] )
		&& ((S_ula_expected_prev[0] !== last_S_ula_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[0] = S_ula_expected_prev[0];
	end
	if (
		( S_ula_expected_prev[1] !== 1'bx ) && ( S_ula_prev[1] !== S_ula_expected_prev[1] )
		&& ((S_ula_expected_prev[1] !== last_S_ula_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[1] = S_ula_expected_prev[1];
	end
	if (
		( S_ula_expected_prev[2] !== 1'bx ) && ( S_ula_prev[2] !== S_ula_expected_prev[2] )
		&& ((S_ula_expected_prev[2] !== last_S_ula_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[2] = S_ula_expected_prev[2];
	end
	if (
		( S_ula_expected_prev[3] !== 1'bx ) && ( S_ula_prev[3] !== S_ula_expected_prev[3] )
		&& ((S_ula_expected_prev[3] !== last_S_ula_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[3] = S_ula_expected_prev[3];
	end
	if (
		( S_ula_expected_prev[4] !== 1'bx ) && ( S_ula_prev[4] !== S_ula_expected_prev[4] )
		&& ((S_ula_expected_prev[4] !== last_S_ula_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[4] = S_ula_expected_prev[4];
	end
	if (
		( S_ula_expected_prev[5] !== 1'bx ) && ( S_ula_prev[5] !== S_ula_expected_prev[5] )
		&& ((S_ula_expected_prev[5] !== last_S_ula_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[5] = S_ula_expected_prev[5];
	end
	if (
		( S_ula_expected_prev[6] !== 1'bx ) && ( S_ula_prev[6] !== S_ula_expected_prev[6] )
		&& ((S_ula_expected_prev[6] !== last_S_ula_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[6] = S_ula_expected_prev[6];
	end
	if (
		( S_ula_expected_prev[7] !== 1'bx ) && ( S_ula_prev[7] !== S_ula_expected_prev[7] )
		&& ((S_ula_expected_prev[7] !== last_S_ula_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S_ula[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_ula_expected_prev);
		$display ("     Real value = %b", S_ula_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_S_ula_exp[7] = S_ula_expected_prev[7];
	end
	if (
		( sais_expected_prev[0] !== 1'bx ) && ( sais_prev[0] !== sais_expected_prev[0] )
		&& ((sais_expected_prev[0] !== last_sais_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[0] = sais_expected_prev[0];
	end
	if (
		( sais_expected_prev[1] !== 1'bx ) && ( sais_prev[1] !== sais_expected_prev[1] )
		&& ((sais_expected_prev[1] !== last_sais_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[1] = sais_expected_prev[1];
	end
	if (
		( sais_expected_prev[2] !== 1'bx ) && ( sais_prev[2] !== sais_expected_prev[2] )
		&& ((sais_expected_prev[2] !== last_sais_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[2] = sais_expected_prev[2];
	end
	if (
		( sais_expected_prev[3] !== 1'bx ) && ( sais_prev[3] !== sais_expected_prev[3] )
		&& ((sais_expected_prev[3] !== last_sais_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[3] = sais_expected_prev[3];
	end
	if (
		( sais_expected_prev[4] !== 1'bx ) && ( sais_prev[4] !== sais_expected_prev[4] )
		&& ((sais_expected_prev[4] !== last_sais_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[4] = sais_expected_prev[4];
	end
	if (
		( sais_expected_prev[5] !== 1'bx ) && ( sais_prev[5] !== sais_expected_prev[5] )
		&& ((sais_expected_prev[5] !== last_sais_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[5] = sais_expected_prev[5];
	end
	if (
		( sais_expected_prev[6] !== 1'bx ) && ( sais_prev[6] !== sais_expected_prev[6] )
		&& ((sais_expected_prev[6] !== last_sais_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[6] = sais_expected_prev[6];
	end
	if (
		( sais_expected_prev[7] !== 1'bx ) && ( sais_prev[7] !== sais_expected_prev[7] )
		&& ((sais_expected_prev[7] !== last_sais_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sais[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sais_expected_prev);
		$display ("     Real value = %b", sais_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sais_exp[7] = sais_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Proc_Simples_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire [7:0] R_ui;
wire [7:0] S_ula;
wire [7:0] sais;

wire sampler;                             

// assign statements (if any)                          
Proc_Simples i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.R_ui(R_ui),
	.rst(rst),
	.S_ula(S_ula),
	.sais(sais)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// rst
initial
begin
	rst = 1'b0;
end 

Proc_Simples_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst(rst),
	.sampler_tx(sampler)
);

Proc_Simples_vlg_check_tst tb_out(
	.R_ui(R_ui),
	.S_ula(S_ula),
	.sais(sais),
	.sampler_rx(sampler)
);
endmodule

